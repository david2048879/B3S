const mongoose = require("mongoose");
const { ObjectId } = mongoose.Schema;

const employeeSchema = new mongoose.Schema(
	{
		empCode: {
			type: Number,
			required: true,
			// unique: true,
			index: true,
		},
		officerCode: Number,
		empNames: {
			type: String,
			trim: true,
			required: true,
			max: 150,
		},
		email: {
			type: String,
			// unique: true,
			trim: true,
			lowercase: true,
		},
		phone: { type: String, trim: true, max: 20 },
		rssbNumber: {
			type: String,
		},
		idDetails: {
			idNumber: String,
			idType: String,
		},
		nationality: {
			type: String,
			trim: true,
			default: "Rwanda",
		},
		gender: {
			type: String,
			trim: true,
		},
		maritalStatus: {
			type: String,
			trim: true,
		},
		dob: Date,
		picture: {
			url: String,
			key: String,
		},
		loanAccount: {
			bankName: String,
			accountNumber: String,
			startDate: Date,
			endDate: Date,
			comment: String,
		},
		loanAccountsHistory: [
			{
				bankName: String,
				accountNumber: String,
				startDate: Date,
				endDate: Date,
				comment: String,
			},
		],
		currentAppointment: {
			appointedDate: Date,
			jobTitleDate: Date,
			contractType: String,
			department: String,
			division: String,
			jobTitle: String,
			location: String,
			locationType: String,
			branch: String,
			executive: String,
			reportTo: String,
			active: { type: Boolean, default: true },
			contractEndDate: Date,
			entitledBasicSalary: Number,
			entitledRentalCostAllowance: Number,
			entitledResponsibilityAllowance: Number,
			entitledTransportAllowance: Number,
			entitledTechnAllowance: Number,
			comment: String,
			transferDate: Date,
		},
		appointments: [
			{
				appointedDate: Date,
				jobTitleDate: Date,
				contractType: String,
				department: String,
				division: String,
				jobTitle: String,
				location: String,
				locationType: String,
				branch: String,
				executive: String,
				reportTo: String,
				active: { type: Boolean, default: true },
				contractEndDate: Date,
				entitledBasicSalary: Number,
				entitledRentalCostAllowance: Number,
				entitledResponsibilityAllowance: Number,
				entitledTransportAllowance: Number,
				comment: String,
				transferDate: Date,
			},
		],
		educationBackground: [
			{
				studyLevel: String,
				certificateName: String,
				certificateDate: Date,
				certificateInstitution: String,
			},
		],
		workExperience: [
			{
				workInstitution: String,
				workPosition: String,
				startDate: Date,
				endDate: Date,
				workSummary: String,
			},
		],
		cvDocuments: [
			{
				title: {
					type: String,
					trim: true,
					required: true,
					max: 350,
				},
				docType: {
					type: String,
					trim: true,
					default: "Other",
				},
				description: {
					type: String,
					trim: true,
				},
				content: {
					url: String,
					key: String,
				},
			},
		],
		currentMonthSalary: {
			bankName: String,
			accountNumber: {
				type: String,
				//  unique: true
			},
			salaryYear: Number,
			salaryMonth: String,
			payDate: Date,
			basicSalary: Number,
			rentalCostAllowance: Number,
			responsibilityAllowance: Number,
			technAllowance: Number,
			teamLeading: [
				{
					staffCode: Number,
					staffNames: String,
					staffJobTitle: String,
					staffExistingNew: String,
				},
			],
			transportAllowance: Number,
			totalOtherAllowances: Number,
			daysWorked: { type: Number, default: 30 },
			grossEarnings: Number,
			otherAllowances: [
				{
					allowanceName: String,
					allowanceComment: String,
					allowanceAmount: Number,
					isRepeated: String,
					startDate: Date,
					endDate: Date,
				},
			],
			payeTPR: Number,
			staffMaternityLeave: Number,
			staffCSR: Number,
			totalOtherDeductions: Number,
			totalStaffDeductions: Number,
			otherDeductions: [
				{
					deductionName: String,
					deductionComment: String,
					deductionAmount: Number,
					isRepeated: String,
					startDate: Date,
					endDate: Date,
				},
			],
			netSalary: Number,
			cieMaternityLeave: Number,
			cieCSR: Number,
			cieCommunityHealth: Number,
			cieTotalContribution: Number,
			validatedBy: String,
			validatedDate: Date,
			validatedComment: String,
			approvedBy: String,
			approvalDate: Date,
			approvalComment: String,
			salaryStatus: String,
			approvedBy2: String,
			approvalDate2: Date,
			approvalComment2: String,
			salaryStatus2: String,
		},
		inflationAllowance: {
			bankName: String,
			accountNumber: String,
			salaryYear: Number,
			salaryMonth: String,
			payDate: Date,
			allowanceAmount: Number,
			adjustmentAmount: Number,
			staffMaternityLeave: Number,
			cieMaternityLeave: Number,
			payeTPR: Number,
			staffCSR: Number,
			cieCSR: Number,
			cieCommunityHealth: Number,
			totalStaffDeductions: Number,
			netSalary: Number,
			validatedBy: String,
			validatedDate: Date,
			validatedComment: String,
			approvedBy: String,
			approvalDate: Date,
			approvalComment: String,
			salaryStatus: String,
			approvedBy2: String,
			approvalDate2: Date,
			approvalComment2: String,
			salaryStatus2: String,
		},
		recordedBy: {
			type: ObjectId,
			ref: "User",
		},
	},
	{ timestamps: true }
);
module.exports = mongoose.model("Tb01_Employee", employeeSchema);
